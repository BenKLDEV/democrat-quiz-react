{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","handleAnswerSelected","htmlFor","answerContent","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","total","questionTotal","answerOptions","map","Result","quizResult","App","state","answerOption","answersCount","Demokrati","Diktatur","Oligarki","result","bind","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","updatedAnswersCount","update","$apply","currentValue","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe0be434.chunk.js","sourcesContent":["const quizQuestions = [\n  {\n    question: \"Vilken ledarstil gillar du mest?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Att låta hela gruppen bestämma\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Att låta ett fåtal personer bestämma\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Att jag själv eller någon annan bestämmer allt\"\n      }\n    ]\n  },\n  {\n    question: \"Är ordet demokrati ett ord som du ogillar?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Verkligen inte\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Lite halvt\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Verkligen\"\n      }\n    ]\n  },\n  {\n    question: \"Tycker du att alla partier ska få komma till tals i riksdagen?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Absolut\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Inte riktigt. Bara ett fåtal.\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Nej. Bara ett parti ska få komma till tals.\"\n      }\n    ]\n  },\n  {\n    question: \"Skulle du vilja att Sverige var ett enmansvälde?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Absolute inte\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Nej. Men en oligarki.\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Det låter bra. Det passar mig.\"\n      }\n    ]\n  },\n  {\n    question: \"Nämn en ledare vars ledarstil du tycker om\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Isabella Lövin\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Putin\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Adolf Hitler\"\n      }\n    ]\n  },\n  {\n    question: \"Ska folk få demonstrera i ditt land?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Ja verkligen! Det är en mänsklig rättighet\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Nja, om dem inte blir ett hot mot oss så är det ok. Annars inte.\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Bara om det är vad jag tillåter.\"\n      }\n    ]\n  },\n  {\n    question: \"Ska folket ha mer makt i ditt land?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Verkligen! Utan tvekan.\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Så länge det inte störa våra lilla inflyteserika grupp.\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Om det följer mitt kommand. Annars kommer det inte på fråga.\"\n      }\n    ]\n  },\n  {\n    question: \"Vem av dessa ledare är mest demokratisk enligt dig?\",\n    answers: [\n      {\n        type: \"Demokrati\",\n        content: \"Barrack Obama\"\n      },\n      {\n        type: \"Oligarki\",\n        content: \"Putin\"\n      },\n      {\n        type: \"Diktatur\",\n        content: \"Kim Jong Un\"\n      }\n    ]\n  }\n];\n  \nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props){\n  return (\n    <h2 className=\"question\">{props.content}</h2>\n  );\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question<span>{props.counter}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props){\n  return (\n    <li className=\"answerOption\">\n      <input type=\"radio\" className=\"radioCustomButton\"\n      name=\"radioGroup\"\n      checked={props.answerType === props.answer}\n      id={props.answerType}\n      value={props.answerType}\n      disabled={props.answer}\n      onChange={props.handleAnswerSelected}\n      />\n\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  handleAnswerSelected: PropTypes.string.isRequired,\n};\n\nexport default AnswerOption;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\n\nfunction Quiz(props){\n\n  function renderAnswerOptions(key){\n    return (\n      <AnswerOption\n      key={key.content}\n      answerContent={key.content}\n      answerType={key.type}\n      answer={props.answer}\n      questionId={props.questionId}\n      handleAnswerSelected={props.handleAnswerSelected}\n      />\n    );\n  }\n\n    return (\n      <ReactCSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n      >\n      \n      <div key={props.questionId}>\n        <QuestionCount\n        counter={props.questionId}\n        total={props.questionTotal}\n      />\n      <Question content={props.question} />\n      <ul className=\"answerOptions\">\n        {props.answerOptions.map(renderAnswerOptions)}\n      </ul>\n      </div>\n      </ReactCSSTransitionGroup>\n        \n    \n    );  \n}\n\nQuiz.propTypes = \n{\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  counter: PropTypes.number.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  handleAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nfunction Result(props)\n{\n  return (\n    <ReactCSSTransitionGroup\n    className=\"container result\"\n    component=\"div\"\n    transitionName=\"fade\"\n    transitionEnterTimeout={800}\n    transitionLeaveTimeout={500}\n    transitionAppear\n    transitionAppearTimeout={500}\n  >\n    <div>\n      <p>Du föredrar en, <strong>{props.quizResult}</strong>!</p>\n    </div>\n  </ReactCSSTransitionGroup>\n  );\n}\n\nResult.propTypes = \n{\n  quizResult: PropTypes.string.isRequired,\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOption: [],\n      answer: '',\n      answersCount: {\n        Demokrati: 0,\n        Diktatur: 0,\n        Oligarki: 0\n      },\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentWillMount(){\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle\n    while(0 !== currentIndex){\n      // pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n    \n      // Then swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  handleAnswerSelected(event){\n    this.setUserAnswer(event.currentTarget.value);\n\n    if(this.state.questionId < quizQuestions.length){\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    const updatedAnswersCount = update(this.state.answersCount, \n      {\n        [answer]: {$apply: (currentValue) => currentValue + 1}\n    })\n\n    this.setState({\n      answersCount: updatedAnswersCount,\n      answer: answer\n    })\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter, \n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    })\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1){\n      this.setState({ result: result[0]})\n    }\n    else {\n      this.setState({result: 'INGET?? försök igen!' })\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n      answer={this.state.answer}\n      answerOptions={this.state.answerOptions}\n      questionId={this.state.questionId}\n      question={this.state.question}\n      questionTotal={quizQuestions.length}\n      handleAnswerSelected={this.handleAnswerSelected}\n    />\n    )\n  }\n\n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.result ? this.renderResult() : this.renderQuiz()}+\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}